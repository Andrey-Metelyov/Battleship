type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import battleship.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/BattleshipView.java
  visible: true
  text: |
    package battleship;

    public class BattleshipView {
        BattleshipGame battleshipGame;

        BattleshipView(BattleshipGame battleshipGame) {
            this.battleshipGame = battleshipGame;
        }

        public void showField() {
            show(battleshipGame.getField(), false);
        }

        private void show(String[][] field, boolean fogged) {
            System.out.print(" ");
            for (int i = 0; i < field[0].length; i++) {
                System.out.print(" " + (i + 1));
            }
            System.out.println();
            char currentRow = 'A';
            for (String[] rows : field) {
                System.out.print(currentRow++);
                for (String cell : rows) {
                    if (fogged && cell.equals("O")) {
                        System.out.print(" ~");
                    } else {
                        System.out.print(" " + cell);
                    }
                }
                System.out.println();
            }
        }

        public void showFoggedField() {
            show(battleshipGame.getField(), true);
        }
    }
  learner_created: true
- name: src/battleship/BattleshipGame.java
  visible: true
  text: |
    package battleship;

    import java.util.Arrays;
    import java.util.Optional;
    import java.util.Scanner;

    public class BattleshipGame {
        private final BattleshipView battleshipView;
        private final String[][] field;
        private final Scanner scanner = new Scanner(System.in);

        class Point {
            int x;
            int y;

            public Point(int x, int y) {
                this.x = x;
                this.y = y;
            }
        }

        public BattleshipGame() {
            this.battleshipView = new BattleshipView(this);
            this.field = new String[10][10];
            for (String[] strings : field) {
                Arrays.fill(strings, "~");
            }
        }

        public void start() {
            placeShips();
            startGame();
        }

        private void startGame() {
            System.out.println("\nThe game starts!");
            battleshipView.showFoggedField();
            takeShot();
        }

        private void takeShot() {
            while (true) {
                System.out.println("\nTake a shot!");
                String coordinate = scanner.nextLine();
                Optional<Point> point = checkCoordinate(coordinate);
                if (point.isEmpty()) {
                    System.out.println("Error! You entered the wrong coordinates! Try again:");
                    continue;
                }
                int x = point.get().x;
                int y = point.get().y;
                if (field[x][y].equals("O")) {
                    field[x][y] = "X";
                    battleshipView.showFoggedField();
                    if (shipSanked(x, y)) {
                        if (allShipsSanked()) {
                            System.out.println("You sank the last ship. You won. Congratulations!");
                            return;
                        } else {
                            System.out.println("\nYou sank a ship! Specify a new target:");
                        }
                    } else {
                        System.out.println("\nYou hit a ship!");
                    }
                } else if (field[x][y].equals("~")) {
                    field[point.get().x][point.get().y] = "M";
                    battleshipView.showFoggedField();
                    System.out.println("\nYou missed!");
                } else {
                    battleshipView.showFoggedField();
                    System.out.println("\nError. Already shot!");
                }
    //            battleshipView.showField();
            }
        }

        private boolean allShipsSanked() {
            for (int i = 0; i < field.length; i++) {
                for (int j = 0; j < field[i].length; j++) {
                    if (field[i][j].equals("O")) {
                        return false;
                    }
                }
            }
            return true;
        }

        private boolean shipSanked(int x, int y) {
            // go left
            int curX = x - 1;
            while (curX > 0) {
                String cell = field[curX][y];
                if (cell.equals("O")) {
                    return false;
                }
                if (cell.equals("M") || cell.equals("~")) {
                    break;
                }
                curX--;
            }
            // go right
            curX = x + 1;
            while (curX < 9) {
                String cell = field[curX][y];
                if (cell.equals("O")) {
                    return false;
                }
                if (cell.equals("M") || cell.equals("~")) {
                    break;
                }
                curX++;
            }
            // go up
            int curY = y - 1;
            while (curY > 0) {
                String cell = field[x][curY];
                if (cell.equals("O")) {
                    return false;
                }
                if (cell.equals("M") || cell.equals("~")) {
                    break;
                }
                curY--;
            }
            // go down
            curY = y + 1;
            while (curY < 9) {
                String cell = field[x][curY];
                if (cell.equals("O")) {
                    return false;
                }
                if (cell.equals("M") || cell.equals("~")) {
                    break;
                }
                curY++;
            }
            return true;
        }

        private Optional<Point> checkCoordinate(String coordinate) {
            int x = coordinate.charAt(0) - 'A';
            if (x < 0 || x > 9) {
                return Optional.empty();
            }
            int y;
            try {
                y = Integer.parseInt(coordinate.substring(1)) - 1;
                if (y < 0 || y > 9) {
                    return Optional.empty();
                }
            } catch (NumberFormatException exception) {
                return Optional.empty();
            }
            return Optional.of(new Point(x, y));
        }

        private void placeShips() {
            battleshipView.showField();
            placeShip("Aircraft Carrier", 5);
            battleshipView.showField();
            placeShip("Battleship", 4);
            battleshipView.showField();
            placeShip("Submarine", 3);
            battleshipView.showField();
            placeShip("Cruiser", 3);
            battleshipView.showField();
            placeShip("Destroyer", 2);
            battleshipView.showField();
        }

        private void placeShip(String shipName, int size) {
            while (true) {
                System.out.println("\nEnter the coordinates of the " + shipName + " (" + size + " cells):");
                String[] coordinates = scanner.nextLine().split(" ");
                if (coordinates.length < 2) {
                    System.out.println("Error");
                    continue;
                }
                Optional<Point> startPoint = checkCoordinate(coordinates[0]);
                Optional<Point> endPoint = checkCoordinate(coordinates[1]);
                if (startPoint.isEmpty() || endPoint.isEmpty()) {
                    System.out.println("Error");
                    continue;
                }
                int x1 = startPoint.get().x;
                int x2 = endPoint.get().x;
                int y1 = startPoint.get().y;
                int y2 = endPoint.get().y;

                if (x1 != x2 && y1 != y2) {
                    System.out.println("Error");
                    continue;
                }
                if (x1 == x2 && Math.abs(y2 - y1) + 1 != size
                        || y1 == y2 && Math.abs(x2 - x1) + 1 != size) {
                    System.out.println("Error! Wrong length of the " + shipName + "! Try again:");
                    continue;
                }
                if (!checkOtherShips(x1, y1, x2, y2)) {
                    System.out.println("Error! You placed it too close to another one. Try again:");
                    continue;
                }

                if (x1 == x2) {
                    int start = Math.min(y1, y2);
                    for (int i = 0; i < size; i++) {
                        field[x1][start + i] = "O";
                    }
                } else {
                    int start = Math.min(x1, x2);
                    for (int i = 0; i < size; i++) {
                        field[start + i][y1] = "O";
                    }
                }
                return;
            }
        }

        private boolean checkOtherShips(int x1, int y1, int x2, int y2) {
            int startX = Math.max(0, Math.min(x1 - 1, x2 - 1));
            int startY = Math.max(0, Math.min(y1 - 1, y2 - 1));
            int endX = Math.min(9, Math.max(x1 + 1, x2 + 1));
            int endY = Math.min(9, Math.max(y1 + 1, y2 + 1));
    //        System.out.println("Check [" + startX + ", " + startY + "] - [" + endX + ", " + endY + "]");
            for (int i = startX; i <= endX; i++) {
                for (int j = startY; j <= endY; j++) {
    //                System.out.print(" " + field[i][j]);
                    if (!field[i][j].equals("~")) {
    //                    System.out.println("Error in checkOtherShips");
                        return false;
                    }
                }
            }
    //        System.out.println();
            return true;
        }

        public String[][] getField() {
            return field;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/667/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 31 Dec 2020 15:49:30 UTC
record: -1
